openapi: 3.0.0
info:
  title: WasaText API
  description: WasaText app backend REST API
  version: 1.0.0
servers: 
  - url: "http://localhost:3000"
    description: localhost server, for development purposses.
tags: 
  - name: login
  - name: conversations
  - name: messages
  - name: comments
  - name: groups
  - name: users
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody: 
        description: User details
        content: 
          application/json:
            schema:
              description: Schemas for Login 
              type: object
              properties:
                username:
                  description: Username decided in login phase
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':      
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: Unique integer that identify user
                type: object
                properties:
                  id:
                    description: id for the user
                    type: integer
                    example: 1
  /conversations/:
    get:
      security:
        - bearerAuth: []
      tags: ['conversations']
      summary: "Get all the preview of conversations"
      description: "Fetch all the preview conversation for the user."
      operationId: getMyConversations
      responses:
        '200':
          description: "List of preview conversation"
          content:
            application/json:
              schema:
                description: Conversations data
                type: array
                minItems: 0
                maxItems: 100
                items:
                  type: object
                  description: User preview conversation
                  properties:
                    id:
                      description: "Unique identifier for the conversation"
                      type: integer
                      example: 1
                      readOnly: true
                    name:
                      description: |-
                        If it is a group chat, it is the name of the group; 
                        otherwise, it is the name of the user.
                      type: string
                      pattern: '^.*?$'
                      minLength: 3
                      maxLength: 16
                      example: "2025 New Year's" 
                    conversationPhoto:
                      description: "Base64 encoded conversation photo"
                      type: string
                      format: byte
                      pattern: "^[A-Za-z0-9+/]+={0,2}$"
                      minLength: 4
                      maxLength: 1000000
                      example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
                    conversationType:
                      description: "The type of the conversation."
                      type: string
                      enum: ["private","group"]
                      example: "group"
                    latestMessage:
                      allOf:
                        - $ref: '#/components/schemas/Message'    
                      description: "Content of the last message in the chat."
        '401':
          description: 'Not Authorized, must be logged in'   
        '404': 
          description: 'User not found.'
        "500": 
          description: "Internal server error"
    post:
      security:
        - bearerAuth: []    
      tags: ['conversations']
      summary: "Create a new conversation"
      description: "Create a new conversation with one user or multiple (group)."
      operationId: createConversation
      requestBody:
        description: "Value that allows creation of a new conversation"
        required: true
        content:
          application/json:
            schema:
              description: "OBJ for create conversation"
              type: object
              properties:
                groupName:
                  description: |-
                   If it is a group chat, it is the name of the group; 
                   otherwise, it is the name of the user.
                  type: string
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
                  example: "2025 New Year's"
                conversationType:
                  description: "The type of the conversation."
                  type: string
                  enum: ["private","group"]
                  example: "group"
                partecipant:
                  description: "Username of the partecipant"
                  type: string
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
                  example: "Luca"
      responses:
        "201": 
          description: "Conversation created successfully"
          content:
            application/json:
              schema:
                description: Unique integer that identify conversation
                type: object
                properties:
                  id:
                    description: id for the conversation
                    type: integer
                    example: 1
        "400": 
          description: "Invalid input data"
        '401':
          description: 'Not Authorized, must be logged in' 
        "404": 
          description: "User not found"
        "500": 
          description: "Internal server error"
  /conversations/{ConversationId}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    get:
      security:
        - bearerAuth: []
      tags: ["conversations"]
      operationId: getConversation
      description: "Get a specific conversation by ID."
      summary: "Get a conversation"
      responses:
        "200":
          description: "Conversation message"
          content:
            application/json:
              schema:
                description: List of conversation messages
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Message"
        '400':
          description: 'Invalid conversation ID' 
        '401':
          description: 'Not Authorized, must be logged in' 
        "404": 
          description: "User or conversation not found"
        "500": 
          description: "Internal server error"
  /conversations/{ConversationId}/messages/:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    post:
      security:
        - bearerAuth: []    
      tags: ['messages']
      description: Send a message in the specific conversation
      summary: Create a new message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: OBJ for messages
              type: object
              properties:
                type:
                  description: |-
                    "The type of the message. Media type allows to send image with text"
                  type: string
                  enum: ["text","media"]
                  example: "media"
                content:
                  description: "This field represent the text body of the message."
                  type: string
                  minLength: 1
                  maxLength: 256
                  pattern: '^.*?$'
                  example: "Yo, check my new Shoes!"
                media:
                  description: "Base64 encoded media"
                  type: string
                  format: byte
                  pattern: "^[A-Za-z0-9+/]+={0,2}$"
                  minLength: 4
                  maxLength: 1000000
                  example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
      responses:
        "201":
          description: "Message is sent successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400": 
          description: "Invalid input data"
        "404": 
          description: "User or conversation not found"
  /conversations/{ConversationId}/messages/{MessageId}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
    delete:
      security:
        - bearerAuth: []
      tags: ["messages"]
      operationId: deleteMessage
      summary: "Delete a message from a conversation"
      description: "Deletes a specific message from a conversation. Only the sender or an admin can delete a message."
      responses:
        "204": 
          description: "Message deleted successfully"
        "400": 
          description: "Bad request"
        "404": 
          description: "Message or conversation not found"
        "500": 
          description: "Internal server error"
    post:
      security:
        - bearerAuth: []
      tags: ["messages"]
      operationId: forwardMessage
      summary: "Forward a message to another conversation"
      description: "Forwards a message from one conversation to another."
      requestBody:
        description: "The destination conversation to forward the message to"
        required: true
        content:
          application/json:
            schema:
              description: Id of the conversation
              type: object
              properties:
                conversationId:
                  description: identifier for the conversation
                  type: integer
                  example: 1
      responses:
        '201':
          description: "Message is forwarded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '404':
          description: "Message not found"
  /conversations/{ConversationId}/messages/{MessageId}/reply:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
    post:
      security:
        - bearerAuth: []
      tags: ["messages"]
      operationId: replyMessage
      summary: "Reply to a message"
      description: "Creates a new message as a reply to an existing message in the conversation."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "Content of the reply message"
              type: object
              properties:
                type:
                  description: |-
                    "The type of the reply message. Media type allows to send image with text"
                  type: string
                  enum: ["text","media"]
                  example: "text"
                content:
                  description: "This field represents the text body of the reply."
                  type: string
                  minLength: 1
                  maxLength: 256
                  pattern: '^.*?$'
                  example: "I'll be there at 3 PM."
                media:
                  description: "Base64 encoded media (for media replies)"
                  type: string
                  format: byte
                  pattern: "^[A-Za-z0-9+/]+={0,2}$"
                  minLength: 4
                  maxLength: 1000000
                  example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
      responses:
        "201":
          description: "Reply sent successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400": 
          description: "Invalid input data"
        "404": 
          description: "Original message or conversation not found"
        "500": 
          description: "Internal server error"
  /conversations/{ConversationId}/messages/{MessageId}/comments/:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
    get:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: "Get message comments"
      operationId: getComments
      description: "Get all the comments for a specific message."
      responses:
        '200':
          description: "List of comments"
          content:
            application/json:
              schema:
                description: List of all message's comments
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: "#/components/schemas/Comment"
        '400':
          description: "Bad request"
        '404':
          description: "Message not found"
        '500': 
          description: "Internal server error"
    post:
      security:
        - bearerAuth: []
      tags: ["comments"]
      summary: "Add a comment to a message"
      description: "Allows to add a comment to a user message"
      operationId: commentMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Content allowed in comment
              type: object
              properties:
                content:
                  description: Content of the comment
                  type: string
                  pattern: '^.*?$'
                  example: "Nice photo!"
                  minLength: 1
                  maxLength: 50
      responses:
        "201":
          description: "Comment added successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400": 
          description: "Invalid input data"
        "404": 
          description: "Message or Conversation not found"
        "500": 
          description: "Internal server error"
  /conversations/{ConversationId}/messages/{MessageId}/comments/{CommentId}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/MessageId"
      - $ref: "#/components/parameters/CommentId"
    delete:
      security:
        - bearerAuth: []
      tags: ['comments']
      operationId: uncommentMessage
      summary: "Delete message comment"
      description: "Allows to delete a comment to a user message"
      responses:
        "204": 
          description: "Comment deleted successfully"
        "400":
          description: "Bad request"
        "404": 
          description: "Comment not found"
  /conversations/{ConversationId}/members/:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    post:
      security:
        - bearerAuth: []
      tags: ['groups']
      operationId: addToGroup
      summary: "Add a member to a group chat"
      description: "Allows adding a user to a specific group chat"
      requestBody:
        description: "The username of the user to be added to the group conversation"
        required: true
        content:
          application/json:
            schema:
              description: "Schemas that describe the type of data addToGroup need"
              type: object
              properties:
                username:
                  description: "The username of the user to be added to the group chat"
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
                  type: string
                  example: Luca
      responses:
        "204": 
          description: "User successfully added to the group"
        "400": 
          description: "Invalid input data"
        "403": 
          description: "To add a user to the group, you must have already started a conversation with them."
        "404": 
          description: "Conversation or user not found"
        "500": 
          description: "INternal server error"
  /conversations/{ConversationId}/members/{UserId}:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
      - $ref: "#/components/parameters/UserId"
    delete:
      security:
        - bearerAuth: []
      tags: ['groups']
      operationId: leaveGroup
      summary: "Remove a user from a group conversation or leave"
      description: "Allows a user to leave a group conversation or remove a member."
      responses:
        "204": 
          description: "User successfully left the group"
        "403": 
          description: "User is not authorized to remove the member (user is not part of the group)"
        "404": 
          description: "Conversation or user not found"
        "500": 
          description: "INternal server error"
  /conversations/{ConversationId}/name:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      security:
        - bearerAuth: []
      tags: ["groups"]
      operationId: setGroupName
      summary: "Update the name of a group conversation"
      description: "Allows a user to update the name of a group conversation."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Schemas for change group name
              type: object
              properties:
                groupName:
                  description: "The new name for the group conversation"
                  type: string
                  pattern: '^.*?$'
                  example: "2026 New Year's"
                  minLength: 1
                  maxLength: 20
      responses:
              "204":
                description: "Group name updated successfully"
              "400":
                description: "Invalid input data"
              "404":
                description: "Conversation not found"
              "500":
                description: "Internal server error"
  /conversations/{ConversationId}/photo:
    parameters:
      - $ref: "#/components/parameters/ConversationId"
    put:
      security:
        - bearerAuth: []
      tags: ["groups"]
      operationId: setGroupPhoto
      summary: "Update the photo of a group conversation"
      description: "Allows a user to update the photo of a group conversation."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Schemas for set group photo
              type: object
              properties:
                groupPhoto:
                  description: "Base64 encoded conversation photo"
                  type: string
                  format: byte
                  pattern: "^[A-Za-z0-9+/]+={0,2}$"
                  minLength: 4
                  maxLength: 1000000
                  example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
      responses:
              "204":
                description: "Group name updated successfully"
              "400":
                description: "Invalid input data"
              "404":
                description: "Conversation not found"
              "500":
                description: "Internal server error"
  /users/:
    get:
      security:
        - bearerAuth: []
      tags: ['users']
      operationId: searchUsers
      summary: Get all users or search users by username
      description: |-
        If no query parameter is provided, it returns all users. 
        If a query parameter 'username' is specified, it filters users by username.
      parameters:
        - name : username
          in: query
          required: false
          description: "The username to search for"
          schema:
            type: string
            minLength: 3
            maxLength: 16
            pattern: "^[a-zA-Z0-9_-]+$"
            example: "Luca"
      responses:
        "200":
          description: |- 
            "List of users found or all users if no query provided.
            If no user is found returns an empty list"
          content:
            application/json:
              schema:
                description: User List
                type: array
                items:
                  $ref: '#/components/schemas/User'
                minItems: 0
                maxItems: 20
        "401":
          description: 'Not Authorized, must be logged in' 
        "500":
          description: Server error
  /users/profile/username:
    put:
      security:
        - bearerAuth: []
      tags: ['users']
      operationId: setMyUserName
      summary: "Update username"
      description: "Allows to update the display name of a specific user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Schemas for update username
              type: object
              properties:
                username:
                  description: "The new display name for the user"
                  pattern: '^.*?$'
                  type: string
                  minLength: 3
                  maxLength: 16
                  example: "Alessandro"
      responses:
        "204":
          description: "Group name updated successfully"
        "400":
          description: "Invalid input data"
        "404":
          description: "Conversation not found"
        "500":
          description: "Internal server error"
  /users/profile/photo:
    put:
      security:
        - bearerAuth: []
      tags: ['users']
      operationId: setMyPhoto
      summary: "Update profile photo"
      description: "Allows to update the display photo of a specific user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: "Schemas to update profile photo"
              type: object
              properties:
                photo:
                  description: "Base64 encoded conversation photo"
                  type: string
                  format: byte
                  pattern: "^[A-Za-z0-9+/]+={0,2}$"
                  minLength: 4
                  maxLength: 1000000
                  example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
      responses:
        "204":
          description: "Group name updated successfully"
        "400":
          description: "Invalid input data"
        "404":
          description: "Conversation not found"
        "500":
          description: "Internal server error"



components:
  securitySchemes:
    bearerAuth:
      description: |
        User authentication with the user ID passed
        as an authentication token.
        Of course, that is extremely insecure, but it's done
        according to the project specification.
      type: http
      scheme: bearer
  schemas:
    User:
      title: User
      description: "This object represent a single user."
      type: object
      properties:
        id:
          description: "Unique identifier for user."
          type: integer
          example: 1
          readOnly: true
        username:
          description: "Username selected on WasaText"
          type: string
          example: "Alessandro"
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        profilePhoto:
          description: Base64 encoded profile photo
          type: string
          format: byte
          pattern: "^[A-Za-z0-9+/]+={0,2}$"
          minLength: 4
          maxLength: 1000000
          example: "SGVsbG8gd29ybGQ="
    Message: 
      title: Message
      description: "This object represent a single message in a conversation."
      type: object
      properties:
        id:
          description: "Unique identifier for conversation."
          type: integer
          example: 1
          readOnly: true
        timestamp:
          description: The date and time when the message was sent
          type: string
          format: date-time
          example: "2023-11-15T14:28:00Z"
        sender:
          description: "The user who send the message"
          allOf:
            - $ref: "#/components/schemas/User"          
        type:
          description: |-
            "The type of the message. Media type allows to send image with text"
          type: string
          enum: ["text","media"]
          example: "media"
        content:
          description: "This field represent the text body of the message."
          type: string
          minLength: 1
          maxLength: 256
          pattern: '^.*?$'
          example: "Yo, check my new Shoes!"
        media:
          description: "Base64 encoded media"
          type: string
          format: byte
          pattern: "^[A-Za-z0-9+/]+={0,2}$"
          minLength: 4
          maxLength: 1000000
          example: "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAEBAQEBAQEBAQEBAQEBAQEB"
        status:
          description: "The status of the messaged"
          type: string
          enum: ['sent','read']
          example: 'sent'
        isForwarded:
          description:  Indicates if the message was forwarded from another conversation."
          type: boolean
          example: false
        replyTo:
          description: "Reference to another message that this message is replying to. Null if not a reply."
          type: object
          properties:
            id:
              description: "ID of the message being replied to"
              type: integer
              example: 5
            content:
              description: "Short preview of the original message"
              type: string
              example: "What time is the meeting?"
            senderName:
              description: "Username of the original message sender"
              type: string
              example: "John"
    Comment:
      title: Comment
      description: "This object represent a single message comment of a conversation."
      type: object
      properties:
        id:
          description: "Unique identifier for comment."
          type: integer
          example: 1
          readOnly: true
        message_id:
          description: "Unique identifier for message."
          type: integer
          example: 1
          readOnly: true
        content:
          description: Content of the comment
          type: string
          pattern: '^.*?$'
          example: "Nice photo!"
          minLength: 1
          maxLength: 50
        sender:
          description: "The user who submit the comment"
          allOf:
            - $ref: "#/components/schemas/User"
        timestamp:
          description: The date and time when the message was sent
          type: string
          format: date-time
          example: "2023-11-15T14:28:00Z"
  parameters:
    UserId:
      description: Unique user identifier
      schema:
        type: integer
        example: 1
        readOnly: true
      name: UserId
      in: path
      required: true
    ConversationId:
      description: Unique conversation identifier
      schema:
        type: integer
        example: 1
        readOnly: true
      name: ConversationId
      in: path
      required: true
    MessageId:
      description: Unique message identifier
      schema:
        type: integer
        example: 1
        readOnly: true
      name: MessageId
      in: path
      required: true
    CommentId:
      description: Unique comment identifier
      schema:
        type: integer
        example: 1
        readOnly: true
      name: CommentId
      in: path
      required: true
  