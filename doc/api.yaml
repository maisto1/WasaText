openapi: 3.0.0
info:
  title: WasaText API
  description: WasaText app backend REST API
  version: 0.0.1
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alessandro
                  pattern: '^[a-zA-Z0-9_]*$'
                  minLength: 3
                  maxLength: 16
        required: true  
      responses:
        "201": 
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{userId}/conversations:
    get:
      tags: ['conversations']
      operationId: getMyConversations
      summary: Get conversations
      description: Retrieve all the user conversations
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: List of conversation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{userId}/conversations/{conversationId}:
    get:
      tags: ['conversations']
      operationId: getConversation
      summary: Get a single conversation
      description: Allows to get a specific conversation
      parameters:
       - $ref: "#/components/parameters/UserID"
       - $ref: "#/components/parameters/ConversationID"
      responses:
        "200":
          description: Single conversation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404": {description: Conversation not found}
    post:
      tags: ['message']
      operationId: sendMessage
      summary: Send a messsage
      description: Allows to send a messagge in a groupchat or individual chat
      parameters:
       - $ref: "#/components/parameters/UserID"
       - $ref: "#/components/parameters/ConversationID"
      requestBody:
        required: true
        description: Messagge content
        content:
          application/json:
            schema:
              type: object
              properties:
                mediatype:
                  description: Type of the message
                  type: string
                  enum: ['text', 'photo']
                  example: photo
                content:
                  description: The textual content of the message
                  type: string
                  minLength: 1
                  maxLength: 256
                  example: "Hi Dear, how are you?"
                photo:
                  description: URL of the photo, required if type is 'photo'
                  type: string
                  format: uri
                  example: "https://example.com/photo.jpg"
                  nullable: true
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '404':
          description: User or conversation not found
  /users/{userId}/username:
    put:
      tags: ['user']
      operationId: setMyUserName
      summary: Update username
      description: Allows to update the display name of a specific user
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new display name for the user
                  type: string
                  example: "Alessandro"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique user identifier
                    type: integer
                    example: 1
                    readOnly: true
                  name:
                    description: The updated display name the user
                    type: string
                    example: Alessandro
        '404': {description: User not found}
  /users/{userId}/profile-photo:
    put:
      tags: ['user']
      operationId: setMyPhoto
      summary: Update profile photo
      description: Allows to update the display photo of a specific user
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uri:
                  description: The new display photo for the user
                  type: string
                  format: uri
                  example: "https://example.com/photo.jpg"
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique user identifier
                    type: integer
                    example: 1
                    readOnly: true
                  uri:
                    description: The updated profile photo of the user
                    type: string
                    format: uri
                    example: "https://example.com/photo.jpg"
        '404': {description: User not found}
    

components:
  schemas:
    User:
      title: User
      description: This object represent a single User
      type: object
      properties:
        id:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: Username selected on WasaText
          type: string
          example: Alessandro
          pattern: '^[a-zA-Z0-9_]*$'
          minLength: 3
          maxLength: 16
        profilePhoto:
          description: User profile photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        conversations:
          description: User conversation list
          type: array
          items:
            type: object
            properties:
              id:
                description: Unique conversation identifier
                type: integer
                example: 1
                readOnly: true
              name:
                description: Conversation's User/Groupchat name 
                type: string
                example: Alessandro
              conversationPhoto:
                description: Conversation's User/Groupchat photo
                type: string
                format: uri
                example: "https://example.com/photo.jpg"
              lastMessage: 
                description: Details of the lasta messagge in the conversation
                type: object
                properties:
                  content:
                    description: Text content of the last message
                    type: string
                    example: "Goodbye!"
                  timestamp:
                    description: Timestamp of when the message was sent
                    format: date-time
                    example: "2023-11-15T14:28:00Z"
    Conversation:
      title: Conversation
      description: This object represent a single conversation
      type: object
      properties:
        id:
          description: Unique conversation identifier
          type: integer
          example: 1
          readOnly: true
        name:
          description: Conversation's User/Groupchat name 
          type: string
          example: Alessandro
        conversationPhoto:
          description: Conversation's User/Groupchat photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        partecipant:
          description: List of users in the conversation
          type: array
          items:
            type: string
            example: Alessandro
        message:
          description: List of conversation's message
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      title: Message
      description: This object represent a single message.
      type: object
      properties:
        id:
          description: Unique identifier for the message
          type: integer
          example: 1
          readOnly: true
        sender:
          description: The sender's username
          type: string
          example: Alessandro
        timestamp:
          description: The date and time when the message was sent
          type: string
          format: date-time
          example: "2023-11-15T14:28:00Z"
        type:
          description: The type of the message
          type: string
          enum: ['text','photo']
          example: "text"
        content:
          description: The texual content of the message
          type: string
          example: "Hi Dear, how are you?"
          minLength: 1
          maxLength: 256
        photo:
          description: The url of the photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
          nullable: true
        status:
          description: The delivery status of the message
          type: string
          enum: ['sent','read']
          example: "sent"
        comments:
          description: List of comments fort this message
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      title: Comment
      description:  This object represent a single comment
      type: object
      properties:
        id:
          description: Unique identifier for the comment
          type: integer
          example: 1
          readOnly: true
        content:
          description: Content of the comment
          type: string
          example: "Nice photo!"
          minLength: 1
          maxLength: 50
        user:
          description: User's comment
          type: string
          example: Alessandro
        timestamp:
          description: The time when the comment was created
          type: string
          format: date-time
          example: "2024-11-15T14:30:00Z"
  parameters:
    UserID:
      description: Unique user identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: userId
      in: path
      required: true
    ConversationID:
      description: Unique conversation identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: conversationId
      in: path
      required: true