openapi: 3.0.0
info:
  title: WasaText API
  description: WasaText app backend REST API
  version: 0.0.1
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Alessandro
                  pattern: '^[a-zA-Z0-9_]*$'
                  minLength: 3
                  maxLength: 16
        required: true  
      responses:
        "201": 
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/{userId}/conversations/:
    get:
      tags: ['conversations']
      operationId: getMyConversations
      summary: Get conversations
      description: Retrieve all the user conversations
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: List of conversation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags: ['conversations']
      operationId: createConversation
      summary: Create a private chat or a group
      description: |-
        Creates a new conversation.
        If the type is "private", a single participant must be specified.
        If the type is "group", no participants are required.
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        description: Details for creating the conversation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Type of the conversation
                  type: string
                  enum: ['private','group']
                  example: group
                group-name:
                  description: Name of the group chat (only if type is group)
                  type: string
                  example: "2025 New Year's"
                  minLength: 1
                  maxLength: 20
                  nullable: true
                group-photo:
                  description: Photo of the group chat (only if type is group)
                  type: string
                  format: uri
                  example: "https://example/photo.jpg"
                  nullable: true
                partecipant:
                  description: Partecipant of the private conversation
                  type: string
                  example: ""
                  nullable: true
      responses:
        "201":
          description: Conversation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          description: Invalid input data
        "404":
          description: Partecipant not found
  /users/{userId}/conversations/{conversationId}:
    get:
      tags: ['conversations']
      operationId: getConversation
      summary: Get a single conversation
      description: Allows to get a specific conversation
      parameters:
       - $ref: "#/components/parameters/UserID"
       - $ref: "#/components/parameters/ConversationID"
      responses:
        "200":
          description: Single conversation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404": {description: Conversation not found}
  /users/{userId}/conversations/{conversationId}/messages/:
    post:
      tags: ['messages']
      operationId: sendMessage
      summary: Send a message to a conversation
      description: Sends a message to a specific conversation. The type of the conversation determines the allowed content.
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        description: Details of the message
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mediatype:
                  description: Type of the message
                  type: string
                  enum: ['text','photo']
                  example: "text"
                content:
                  description: Text content of the message
                  type: string
                  example: "Hello!"
                  minLength: 1
                  maxLength: 256
                  nullable: true
                photo:
                  description: URL of the photo (required for mediatype photo)
                  type: string
                  format: uri
                  example: "https://example.com/photo.jpg"
                  nullable: true
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400": {description: Invalid input data}
        "404": {description: Conversation not found}
  /users/{userId}/conversations/{conversationId}/messages/{messageId}:
    delete:
      tags: ['messages']
      operationId: deleteMessage
      summary: Delete a message from a conversation
      description: Deletes a specific message from a conversation. Only the sender or an admin can delete a message.
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/MessageID"
      responses:
        "204": { description: Message deleted successfully }
        "404": {description: Message or conversation not found}
  /users/{userId}/conversations/{conversationId}/messages/{messageId}/comments/:
    post:
      tags: ['comments']
      operationId: commentMessage
      summary: Add a comment to a message
      description: Allows to add a comment to a user message
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/MessageID"
      requestBody:
        description: Details of the comment
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  description: Text content of the comment
                  type: string
                  example: "Wow!Nice photo"
                  minLength: 1
                  maxLength: 50
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400": {description: Invalid input data}
        "404": {description: Message or Conversation not found}
  /users/{userId}/conversations/{conversationId}/messages/{messageId}/comments/{commentId}:
    delete:
      tags: ['comments']
      operationId: uncommentMessage
      summary: Delete message comment
      description: Allows to delete a comment to a user message
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/MessageID"
        - $ref: "#/components/parameters/CommentID"
      responses:
        "204": { description: Comment deleted successfully }
        "404": {description: Comment not found}
  /users/{userId}/conversations/{conversationId}/members/:
    post:
      tags: ['groups']
      operationId: addToGroup
      summary: Add a member to a group chat
      description: Allows adding a user to a specific group chat
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        description: The username of the user to be added to the group conversation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: The username of the user to be added to the group
                  type: string
                  example: Luca
      responses:
        "204": { description: "User successfully added to the group"}
        "403": { description: "To add a user to the group, you must have already started a conversation with them." }
        "404": { description: "Conversation or user not found"}
        "409": { description: "User is already a member of the group"}
  /users/{userId}/conversations/{conversationId}/members/{memberId}:
    delete:
      tags: ['groups']
      operationId: leaveGroup
      summary: Remove a user from a group conversation or leave
      description: Allows a user to leave a group conversation or remove a member (admin).
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
        - $ref: "#/components/parameters/MemberID"
      responses:
        "204": { description: "User successfully left the group" }
        "403": {description: "User is not authorized to remove the member (e.g., user is not part of the group)"}
        "404": { description: "Conversation or user not found" }
  /users/{userId}/username:
    put:
      tags: ['users']
      operationId: setMyUserName
      summary: Update username
      description: Allows to update the display name of a specific user
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new display name for the user
                  type: string
                  example: "Alessandro"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique user identifier
                    type: integer
                    example: 1
                    readOnly: true
                  name:
                    description: The updated display name the user
                    type: string
                    example: Alessandro
        '404': {description: User not found}
  /users/{userId}/profile-photo:
    put:
      tags: ['users']
      operationId: setMyPhoto
      summary: Update profile photo
      description: Allows to update the display photo of a specific user
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uri:
                  description: The new display photo for the user
                  type: string
                  format: uri
                  example: "https://example.com/photo.jpg"
      responses:
        '200':
          description: Profile photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique user identifier
                    type: integer
                    example: 1
                    readOnly: true
                  uri:
                    description: The updated profile photo of the user
                    type: string
                    format: uri
                    example: "https://example.com/photo.jpg"
        '404': {description: User not found}
  /users/{userId}/conversations/{conversationId}/name:
    put:
      tags: ['groups']
      operationId: setGroupName
      summary: Update the name of a group conversation
      description: Allows a user to update the name of a group conversation.
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        description: The new name for the group conversation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new name for the group conversation
                  type: string
                  example: "2026 New Year's"
                  minLength: 1
                  maxLength: 20
      responses:
        "200":
          description: Group name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique conversation identifier
                    type: integer
                    example: 1
                  name:
                    description: The updated name of the group
                    type: string
                    example: "2026 New Year's"
        "400":
          description: Invalid input data (e.g., the new name is too short/long or empty)
        "404":
          description: Conversation not found (group with the provided ID doesn't exist)
        "403":
          description: Forbidden (e.g., user not authorized to update the group name)
  /users/{userId}/conversations/{conversationId}/photo:
    put:
      tags: ['groups']
      operationId: setGroupPhoto
      summary: Update the photo of a group conversation
      description: Allows a user to update the photo of a group conversation.
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/ConversationID"
      requestBody:
        description: The new photo for the group conversation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uri:
                  description: The new photo for the group conversation
                  type: string
                  format: uri
                  example: "https://example/newphoto.jpg"
      responses:
        "200":
          description: Group photo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Unique conversation identifier
                    type: integer
                    example: 1
                  uri:
                    description: The updated photo of the group
                    format: uri
                    example: "https://example/newphoto.jpg"
        "400":
          description: Invalid input data
        "404":
          description: Conversation not found
        "403":
          description: User not authorized to update the group name
  /users/:
    get:
      tags: ['users']
      operationId: searchUsers
      summary: Get all users or search users by username
      description: |-
        If no query parameter is provided, it returns all users. 
        If a query parameter 'username' is specified, it filters users by username.
      parameters:
        - name: username
          in: query
          description: The username to search for
          required: false
          schema:
            type: string
            example: Luca
      responses:
        "200":
          description: |- 
            List of users found or all users if no query provided.
            If no user is found returns an empty list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      description: User username
                      type: string
                      example: Luca202
                    uri:
                      description: User profile photo
                      type: string
                      format: uri
                      example: "https://example.com/luca.jpg"



components:
  schemas:
    User:
      title: User
      description: This object represent a single User
      type: object
      properties:
        id:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: Username selected on WasaText
          type: string
          example: Alessandro
          pattern: '^[a-zA-Z0-9_]*$'
          minLength: 3
          maxLength: 16
        profilePhoto:
          description: User profile photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        conversations:
          description: User conversation list
          type: array
          items:
            type: object
            properties:
              id:
                description: Unique conversation identifier
                type: integer
                example: 1
                readOnly: true
              name:
                description: Conversation's User/Groupchat name 
                type: string
                example: Alessandro
              conversationPhoto:
                description: Conversation's User/Groupchat photo
                type: string
                format: uri
                example: "https://example.com/photo.jpg"
              lastMessage: 
                description: Details of the lasta messagge in the conversation
                type: object
                properties:
                  content:
                    description: Text content of the last message
                    type: string
                    example: "Goodbye!"
                  timestamp:
                    description: Timestamp of when the message was sent
                    format: date-time
                    example: "2023-11-15T14:28:00Z"
    Conversation:
      title: Conversation
      description: This object represent a single conversation
      type: object
      properties:
        id:
          description: Unique conversation identifier
          type: integer
          example: 1
          readOnly: true
        name:
          description: Conversation's User/Groupchat name 
          type: string
          example: Alessandro
        conversationPhoto:
          description: Conversation's User/Groupchat photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
        partecipant:
          description: List of users in the conversation
          type: array
          items:
            type: string
            example: Alessandro
        message:
          description: List of conversation's message
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      title: Message
      description: This object represent a single message.
      type: object
      properties:
        id:
          description: Unique identifier for the message
          type: integer
          example: 1
          readOnly: true
        sender:
          description: The sender's username
          type: string
          example: Alessandro
        timestamp:
          description: The date and time when the message was sent
          type: string
          format: date-time
          example: "2023-11-15T14:28:00Z"
        type:
          description: The type of the message
          type: string
          enum: ['text','photo']
          example: "text"
        content:
          description: The texual content of the message
          type: string
          example: "Hi Dear, how are you?"
          minLength: 1
          maxLength: 256
        photo:
          description: The url of the photo
          type: string
          format: uri
          example: "https://example.com/photo.jpg"
          nullable: true
        status:
          description: The delivery status of the message
          type: string
          enum: ['sent','read']
          example: "sent"
        comments:
          description: List of comments fort this message
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      title: Comment
      description:  This object represent a single comment
      type: object
      properties:
        id:
          description: Unique identifier for the comment
          type: integer
          example: 1
          readOnly: true
        content:
          description: Content of the comment
          type: string
          example: "Nice photo!"
          minLength: 1
          maxLength: 50
        user:
          description: User's comment
          type: string
          example: Alessandro
        timestamp:
          description: The time when the comment was created
          type: string
          format: date-time
          example: "2024-11-15T14:30:00Z"
  parameters:
    UserID:
      description: Unique user identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: userId
      in: path
      required: true
    ConversationID:
      description: Unique conversation identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: conversationId
      in: path
      required: true
    MessageID:
      description: Unique message identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: messageId
      in: path
      required: true
    CommentID:
      description: Unique comment identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: commentId
      in: path
      required: true
    MemberID:
      description: Unique member group identificator
      schema:
        type: integer
        example: 1
        readOnly: true
      name: memberId
      in: path
      required: true